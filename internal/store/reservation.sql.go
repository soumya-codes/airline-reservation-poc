// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: reservation.sql

package store

import (
	"context"
)

const bookSeat = `-- name: BookSeat :one
UPDATE reservation SET passenger_id = $1 WHERE id = $2 RETURNING 1
`

type BookSeatParams struct {
	PassengerID int32 `db:"passenger_id" json:"passenger_id"`
	Identifier  int32 `db:"id" json:"id"`
}

func (q *Queries) BookSeat(ctx context.Context, arg BookSeatParams) (int32, error) {
	row := q.db.QueryRow(ctx, bookSeat, arg.PassengerID, arg.Identifier)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}

const getSeatWithExclusiveLock = `-- name: GetSeatWithExclusiveLock :one
SELECT id, seat_id FROM reservation WHERE trip_id = $1 AND passenger_id IS NULL ORDER BY id LIMIT 1 FOR UPDATE
`

type GetSeatWithExclusiveLockRow struct {
	Identifier int32  `db:"id" json:"id"`
	SeatID     string `db:"seat_id" json:"seat_id"`
}

func (q *Queries) GetSeatWithExclusiveLock(ctx context.Context, tripID int32) (GetSeatWithExclusiveLockRow, error) {
	row := q.db.QueryRow(ctx, getSeatWithExclusiveLock, tripID)
	var i GetSeatWithExclusiveLockRow
	err := row.Scan(&i.Identifier, &i.SeatID)
	return i, err
}

const getSeatWithExclusiveLockSkipped = `-- name: GetSeatWithExclusiveLockSkipped :one
SELECT id, seat_id FROM reservation WHERE trip_id = $1 AND passenger_id IS NULL ORDER BY id LIMIT 1 FOR UPDATE SKIP LOCKED
`

type GetSeatWithExclusiveLockSkippedRow struct {
	Identifier int32  `db:"id" json:"id"`
	SeatID     string `db:"seat_id" json:"seat_id"`
}

func (q *Queries) GetSeatWithExclusiveLockSkipped(ctx context.Context, tripID int32) (GetSeatWithExclusiveLockSkippedRow, error) {
	row := q.db.QueryRow(ctx, getSeatWithExclusiveLockSkipped, tripID)
	var i GetSeatWithExclusiveLockSkippedRow
	err := row.Scan(&i.Identifier, &i.SeatID)
	return i, err
}

const getSeatWithNoLock = `-- name: GetSeatWithNoLock :one
SELECT id, seat_id FROM reservation WHERE trip_id = $1 AND passenger_id IS NULL ORDER BY id LIMIT 1
`

type GetSeatWithNoLockRow struct {
	Identifier int32  `db:"id" json:"id"`
	SeatID     string `db:"seat_id" json:"seat_id"`
}

func (q *Queries) GetSeatWithNoLock(ctx context.Context, tripID int32) (GetSeatWithNoLockRow, error) {
	row := q.db.QueryRow(ctx, getSeatWithNoLock, tripID)
	var i GetSeatWithNoLockRow
	err := row.Scan(&i.Identifier, &i.SeatID)
	return i, err
}

const getSeatWithSharedLock = `-- name: GetSeatWithSharedLock :one
SELECT id, seat_id FROM reservation WHERE trip_id = $1 AND passenger_id IS NULL ORDER BY id LIMIT 1 FOR SHARE
`

type GetSeatWithSharedLockRow struct {
	Identifier int32  `db:"id" json:"id"`
	SeatID     string `db:"seat_id" json:"seat_id"`
}

func (q *Queries) GetSeatWithSharedLock(ctx context.Context, tripID int32) (GetSeatWithSharedLockRow, error) {
	row := q.db.QueryRow(ctx, getSeatWithSharedLock, tripID)
	var i GetSeatWithSharedLockRow
	err := row.Scan(&i.Identifier, &i.SeatID)
	return i, err
}

const getSeatWithSharedLockSkipped = `-- name: GetSeatWithSharedLockSkipped :one
SELECT id, seat_id FROM reservation WHERE trip_id = $1 AND passenger_id IS NULL ORDER BY id LIMIT 1 FOR SHARE SKIP LOCKED
`

type GetSeatWithSharedLockSkippedRow struct {
	Identifier int32  `db:"id" json:"id"`
	SeatID     string `db:"seat_id" json:"seat_id"`
}

func (q *Queries) GetSeatWithSharedLockSkipped(ctx context.Context, tripID int32) (GetSeatWithSharedLockSkippedRow, error) {
	row := q.db.QueryRow(ctx, getSeatWithSharedLockSkipped, tripID)
	var i GetSeatWithSharedLockSkippedRow
	err := row.Scan(&i.Identifier, &i.SeatID)
	return i, err
}

const getTripSeats = `-- name: GetTripSeats :many
SELECT seat_id, passenger_id FROM reservation WHERE trip_id = $1 ORDER BY seat_id
`

type GetTripSeatsRow struct {
	SeatID      string `db:"seat_id" json:"seat_id"`
	PassengerID int32  `db:"passenger_id" json:"passenger_id"`
}

func (q *Queries) GetTripSeats(ctx context.Context, tripID int32) ([]GetTripSeatsRow, error) {
	rows, err := q.db.Query(ctx, getTripSeats, tripID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTripSeatsRow
	for rows.Next() {
		var i GetTripSeatsRow
		if err := rows.Scan(&i.SeatID, &i.PassengerID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
